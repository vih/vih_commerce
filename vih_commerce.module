<?php
/**
 * @file
 * Code for the VIH Commerce feature.
 */

include_once 'vih_commerce.features.inc';

/**
 * Checks whether event has expired
 */
function _vih_commerce_is_expired($entity) {
  $course_is_expired = FALSE;

  // Checking for expired course.
  if (!empty($entity->field_course_time[LANGUAGE_NONE][0]['value2'])) {
    $timezone = $entity->field_course_time[LANGUAGE_NONE][0]['timezone'];
    $timezone_db = $entity->field_course_time[LANGUAGE_NONE][0]['timezone_db'];
    $time = $entity->field_course_time[LANGUAGE_NONE][0]['value2'] . ' ' . $timezone_db;
    $course_time = format_date(strtotime($time), 'custom', 'Y-m-d H:i:s', $timezone);
  }
  elseif (!empty($entity->field_date[LANGUAGE_NONE][0]['value2'])) {
    $timezone = $entity->field_date[LANGUAGE_NONE][0]['timezone'];
    $timezone_db = $entity->field_date[LANGUAGE_NONE][0]['timezone_db'];
    $time = $entity->field_date[LANGUAGE_NONE][0]['value2'] . ' ' . $timezone_db;
    $course_time = format_date(strtotime($time), 'custom', 'Y-m-d H:i:s', $timezone);
  }
  return ($course_is_expired = (strtotime($course_time) < time()));
}

/**
 * Checks whether event is out of stock
 */
function _vih_commerce_is_out_of_stock($product_id) {
  if (module_exists('commerce_stock')) {
    $product = commerce_product_load($product_id);
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
    if (isset($product_wrapper->commerce_stock) ){
      if (!(isset($product_wrapper->commerce_stock_override) && $product_wrapper->commerce_stock_override->value() == 1)) {
        if ($product_wrapper->commerce_stock->value() <= 0) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Checks whether registration is in progress on other course
 */
function _vih_commerce_registration_in_progress_on_other_course($entity) {
  $product_ids = vih_commerce_get_product_ids($entity);
  $cart_product_ids = vih_commerce_get_products_in_cart();
  $merged_ids = array_intersect($cart_product_ids, $product_ids);
  $is_cart_products_available = !empty($merged_ids);

  return ($is_cart_products_available === FALSE AND !empty($cart_product_ids));
}

/**
 * Checks whether registration is in progress on current course
 */
function _vih_commerce_registration_in_progress_on_current_course($entity) {
  $product_ids = vih_commerce_get_product_ids($entity);
  $cart_product_ids = vih_commerce_get_products_in_cart();
  $merged_ids = array_intersect($cart_product_ids, $product_ids);
  $is_cart_products_available = !empty($merged_ids);

  return ($is_cart_products_available === TRUE AND !empty($cart_product_ids));
}

/**
 * Finds product IDs for the particular product display in the add to cart form
 *
 * @param
 *  An entity with a product field
 *
 * @return
 *  An array of product ids
 */
function vih_commerce_get_product_ids($entity) {
  if (!empty($entity->field_golf_product[LANGUAGE_NONE])) {
    $products = $entity->field_golf_product[LANGUAGE_NONE];
  }
  elseif(!empty($entity->field_product[LANGUAGE_NONE])) {
    $products = $entity->field_product[LANGUAGE_NONE];
  }
  else {
    return array();
  }

  $ids = array();
  foreach ($products as $a) {
    $ids[] = $a['product_id'];
  }
  return $ids;
}

/**
 * Return the product_id values for all products in the cart
 *
 * @return
 *  An array of product ids
 */
function vih_commerce_get_products_in_cart() {
  $cart_product_ids = &drupal_static(__FUNCTION__);

  if (!isset($cart_product_ids)) {
    global $user;
    $cart_product_ids = array();
    $order = commerce_cart_order_load($user->uid);
    if ($order) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        $product_wrapper = $line_item_wrapper->commerce_product;
        $cart_product_ids[] = $product_wrapper->product_id->value();
      }
    }

    $cart_product_ids = array_unique($cart_product_ids);
  }

  return $cart_product_ids;
}
